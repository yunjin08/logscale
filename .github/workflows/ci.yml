name: CI/CD Pipeline

on:
  push:
  pull_request:

env:
  GO_VERSION: '1.24'
  POSTGRES_VERSION: '15-alpine'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    env:
      GO_VERSION: '1.24'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: logscale_test
          POSTGRES_USER: logscale_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Run unit tests
      run: go test ./test -v -coverprofile=coverage.out

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://logscale_test:test_password@localhost:5432/logscale_test?sslmode=disable
      run: go test ./test -v -tags=integration

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Job 2: Docker Build and Test
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: build-and-test

    env:
      GO_VERSION: '1.24'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t logscale:test .

    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm --name test-container logscale:test --help || true
        
        # Check image size
        docker images logscale:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    env:
      GO_VERSION: '1.24'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  # Job 4: API Endpoint Tests
  api-tests:
    name: API Endpoint Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]

    env:
      GO_VERSION: '1.24'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: logscale_api_test
          POSTGRES_USER: logscale_api_test
          POSTGRES_PASSWORD: api_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Start API server
      env:
        DATABASE_URL: postgres://logscale_api_test:api_test_password@localhost:5432/logscale_api_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
        STREAM_NAME: logscale:logs
      run: |
        # Wait for database to be ready
        sleep 5
        
        # Run database migrations using migrate tool
        go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
        migrate -path db/migrations -database "postgres://logscale_api_test:api_test_password@localhost:5432/logscale_api_test?sslmode=disable" up
        
        # Start API server
        go run cmd/api/main.go &
        sleep 10

    - name: Test API endpoints
      run: |
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -s http://localhost:8080/health > /dev/null; then
            echo "API server is ready"
            break
          fi
          echo "Waiting for API server... ($i/30)"
          sleep 2
        done
        
        # Test health endpoint
        curl -f http://localhost:8080/health
        
        # Test logs endpoint
        curl -f -X POST http://localhost:8080/v1/logs \
          -H "Content-Type: application/json" \
          -d '{"log":{"service":"test","level":"info","message":"test"}}'

  # Job 5: Notify on Failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, security-scan, api-tests]
    if: failure()

    steps:
    - name: Notify failure
      run: |
        echo "One or more CI jobs failed!"
        echo "Check the GitHub Actions logs for details."
        # Add your notification logic here (Slack, email, etc.)
